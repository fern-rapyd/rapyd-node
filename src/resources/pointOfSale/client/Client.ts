/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { RapydApi } from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    auth?: {
      accessKey?: core.Supplier<string>;
    };
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async open(request: RapydApi.pointOfSale.open.Request): Promise<RapydApi.pointOfSale.open.Response> {
    const response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/pos/login/${request.posId}/${request.otpCode}`
      ),
      method: "POST",
      headers: {
        access_key: await core.Supplier.get(this.options.auth?.accessKey),
        phone_number: request.phoneNumber,
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.pointOfSale.OpenSessionResponse.parse(
          response.body as serializers.pointOfSale.OpenSessionResponse.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async close(request: RapydApi.pointOfSale.close.Request): Promise<RapydApi.pointOfSale.close.Response> {
    const response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/pos/login/${request.posId}/${request.otpCode}`
      ),
      method: "POST",
      headers: {
        access_key: await core.Supplier.get(this.options.auth?.accessKey),
        phone_number: request.phoneNumber,
        token_id: request.tokenId,
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.pointOfSale.CloseSessionResponse.parse(
          response.body as serializers.pointOfSale.CloseSessionResponse.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async echo(): Promise<RapydApi.pointOfSale.echo.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/pos/echo"),
      method: "GET",
      headers: {
        access_key: await core.Supplier.get(this.options.auth?.accessKey),
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.pointOfSale.EchoResponse.parse(response.body as serializers.pointOfSale.EchoResponse.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
