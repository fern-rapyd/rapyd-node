/**
 * This file auto-generated by Fern from our API Definition.
 */

export interface Currency<RawValue extends Currency.RawValue = Currency.RawValue> {
  value: RawValue;
  visit: <Result>(visitor: Currency._Visitor<Result>) => Result;
}

const _Usd: Currency<"USD"> = {
  value: "USD",
  visit: (visitor) => visitor.usd(),
};
const _Gbp: Currency<"GBP"> = {
  value: "GBP",
  visit: (visitor) => visitor.gbp(),
};
export const Currency = {
  Usd: _Usd,
  Gbp: _Gbp,
  _parse: (value: string): Currency => {
    switch (value) {
      case "USD": {
        return _Usd;
      }
      case "GBP": {
        return _Gbp;
      }
      default: {
        return {
          value: value as Currency.RawValue,
          visit: (visitor) => visitor._other(value),
        };
      }
    }
  },
} as const;

export declare namespace Currency {
  type RawValue = "USD" | "GBP";

  interface _Visitor<Result> {
    usd: () => Result;
    gbp: () => Result;
    _other: (value: string) => Result;
  }
}
