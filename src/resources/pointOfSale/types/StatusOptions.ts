/**
 * This file auto-generated by Fern from our API Definition.
 */

export interface StatusOptions<RawValue extends StatusOptions.RawValue = StatusOptions.RawValue> {
  value: RawValue;
  visit: <Result>(visitor: StatusOptions._Visitor<Result>) => Result;
}

const _Success: StatusOptions<"SUCCESS"> = {
  value: "SUCCESS",
  visit: (visitor) => visitor.success(),
};
const _Failed: StatusOptions<"FAILED"> = {
  value: "FAILED",
  visit: (visitor) => visitor.failed(),
};
export const StatusOptions = {
  Success: _Success,
  Failed: _Failed,
  _parse: (value: string): StatusOptions => {
    switch (value) {
      case "SUCCESS": {
        return _Success;
      }
      case "FAILED": {
        return _Failed;
      }
      default: {
        return {
          value: value as StatusOptions.RawValue,
          visit: (visitor) => visitor._other(value),
        };
      }
    }
  },
} as const;

export declare namespace StatusOptions {
  type RawValue = "SUCCESS" | "FAILED";

  interface _Visitor<Result> {
    success: () => Result;
    failed: () => Result;
    _other: (value: string) => Result;
  }
}
